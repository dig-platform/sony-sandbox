{
    "pipes": [
        {
            "name": "MapObjectPipe",
            "id": "pipe-MapObjectPipe-6699661a7ca9c1616d77dc94cbed2df7e249c5bd81e0724299e22429d1239ce1d293838d3afdbd5860ad98bdb5c90636cdace5188890e7123de44f067f5a29a2",
            "file": "src/app/phoenix/lib/pipes/map-object.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type[]",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "mapObject",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'mapObject',\n  standalone: true\n})\nexport class MapObjectPipe implements PipeTransform {\n\n  transform(value: any, ...args: unknown[]): {key: string, value: any}[] {\n    if (typeof value !== 'object') {\n      throw new Error('Value is not an object');\n    }\n    return Object.keys(value).map(key => ({\n      key,\n      value: value[key] ? value[key] : null\n    }));\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AccountRequest",
            "id": "interface-AccountRequest-18738d406b7fb66ad2a89658f8ccbedcedfad7914bd55e5318c9d0cd2a324536f9e62c271c9a187766c5046f7b689ef7089387d117c2627939c36e8e15263bc0",
            "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport {patchAccountRequest} from './account-request.actions';\n\nexport const accountRequestFeatureKey = 'accountRequest';\n\nexport enum AccountRequestStatus {\n  pristine = 'pristine',\n  dirty = 'dirty',\n  done = 'done'\n}\n\nexport interface State {\n  accountRequest?: AccountRequest;\n  steps: AccountRequestStep[]\n}\n\nexport interface AccountRequest {\n  firstName?: string;\n}\n\nexport interface AccountRequestStep {\n  index?: number;\n  label: string;\n  title: string;\n  description: string;\n  active?: boolean;\n  disabled?: boolean;\n  status?: AccountRequestStatus;\n}\n\nexport const initialState: State = {\n  steps: []\n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(patchAccountRequest, (state, {patch}) => ({...state, accountRequest: {...state.accountRequest, ...patch}}))\n);\n",
            "properties": [
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AccountRequestStep",
            "id": "interface-AccountRequestStep-18738d406b7fb66ad2a89658f8ccbedcedfad7914bd55e5318c9d0cd2a324536f9e62c271c9a187766c5046f7b689ef7089387d117c2627939c36e8e15263bc0",
            "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport {patchAccountRequest} from './account-request.actions';\n\nexport const accountRequestFeatureKey = 'accountRequest';\n\nexport enum AccountRequestStatus {\n  pristine = 'pristine',\n  dirty = 'dirty',\n  done = 'done'\n}\n\nexport interface State {\n  accountRequest?: AccountRequest;\n  steps: AccountRequestStep[]\n}\n\nexport interface AccountRequest {\n  firstName?: string;\n}\n\nexport interface AccountRequestStep {\n  index?: number;\n  label: string;\n  title: string;\n  description: string;\n  active?: boolean;\n  disabled?: boolean;\n  status?: AccountRequestStatus;\n}\n\nexport const initialState: State = {\n  steps: []\n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(patchAccountRequest, (state, {patch}) => ({...state, accountRequest: {...state.accountRequest, ...patch}}))\n);\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountRequestStatus",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ControlledForm",
            "id": "interface-ControlledForm-d43bde695a77613b5c4400e8bd73a29dd939fbb379a20206dcef931140745d2dc043d80679e54c9ec503b80569561d7a69037773a2c7d231364212c6f1915f52",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FormGroup} from '@angular/forms';\n\nexport interface NgrxForm {\n  instanceId: string;\n  valid?: boolean;\n  pristine?: boolean;\n  // todo type the errors\n  errors?: any;\n  // todo only allow serializable data types\n  data: {[key: string]: any};\n}\n\nexport interface NgrxFormGroup {\n  instanceId: string;\n  forms: NgrxForm[];\n}\n\nexport interface NgrxFormAccessor {\n  getForm(): FormGroup\n}\n\nexport interface ControlledForm {\n  instanceId: string;\n  formGroup: FormGroup;\n}\n\nexport interface ControlledFormData {\n  instanceId: string;\n  value: any\n  dirty: boolean;\n  pristine?: boolean;\n  valid: boolean;\n  errors: any;\n}\n\nexport interface ControlledFormGroupData extends ControlledFormData {\n  forms: string[];\n}\n",
            "properties": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ControlledFormData",
            "id": "interface-ControlledFormData-d43bde695a77613b5c4400e8bd73a29dd939fbb379a20206dcef931140745d2dc043d80679e54c9ec503b80569561d7a69037773a2c7d231364212c6f1915f52",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FormGroup} from '@angular/forms';\n\nexport interface NgrxForm {\n  instanceId: string;\n  valid?: boolean;\n  pristine?: boolean;\n  // todo type the errors\n  errors?: any;\n  // todo only allow serializable data types\n  data: {[key: string]: any};\n}\n\nexport interface NgrxFormGroup {\n  instanceId: string;\n  forms: NgrxForm[];\n}\n\nexport interface NgrxFormAccessor {\n  getForm(): FormGroup\n}\n\nexport interface ControlledForm {\n  instanceId: string;\n  formGroup: FormGroup;\n}\n\nexport interface ControlledFormData {\n  instanceId: string;\n  value: any\n  dirty: boolean;\n  pristine?: boolean;\n  valid: boolean;\n  errors: any;\n}\n\nexport interface ControlledFormGroupData extends ControlledFormData {\n  forms: string[];\n}\n",
            "properties": [
                {
                    "name": "dirty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pristine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "valid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ControlledFormGroupData",
            "id": "interface-ControlledFormGroupData-d43bde695a77613b5c4400e8bd73a29dd939fbb379a20206dcef931140745d2dc043d80679e54c9ec503b80569561d7a69037773a2c7d231364212c6f1915f52",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FormGroup} from '@angular/forms';\n\nexport interface NgrxForm {\n  instanceId: string;\n  valid?: boolean;\n  pristine?: boolean;\n  // todo type the errors\n  errors?: any;\n  // todo only allow serializable data types\n  data: {[key: string]: any};\n}\n\nexport interface NgrxFormGroup {\n  instanceId: string;\n  forms: NgrxForm[];\n}\n\nexport interface NgrxFormAccessor {\n  getForm(): FormGroup\n}\n\nexport interface ControlledForm {\n  instanceId: string;\n  formGroup: FormGroup;\n}\n\nexport interface ControlledFormData {\n  instanceId: string;\n  value: any\n  dirty: boolean;\n  pristine?: boolean;\n  valid: boolean;\n  errors: any;\n}\n\nexport interface ControlledFormGroupData extends ControlledFormData {\n  forms: string[];\n}\n",
            "properties": [
                {
                    "name": "forms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ControlledFormData"
        },
        {
            "name": "NgrxForm",
            "id": "interface-NgrxForm-d43bde695a77613b5c4400e8bd73a29dd939fbb379a20206dcef931140745d2dc043d80679e54c9ec503b80569561d7a69037773a2c7d231364212c6f1915f52",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FormGroup} from '@angular/forms';\n\nexport interface NgrxForm {\n  instanceId: string;\n  valid?: boolean;\n  pristine?: boolean;\n  // todo type the errors\n  errors?: any;\n  // todo only allow serializable data types\n  data: {[key: string]: any};\n}\n\nexport interface NgrxFormGroup {\n  instanceId: string;\n  forms: NgrxForm[];\n}\n\nexport interface NgrxFormAccessor {\n  getForm(): FormGroup\n}\n\nexport interface ControlledForm {\n  instanceId: string;\n  formGroup: FormGroup;\n}\n\nexport interface ControlledFormData {\n  instanceId: string;\n  value: any\n  dirty: boolean;\n  pristine?: boolean;\n  valid: boolean;\n  errors: any;\n}\n\nexport interface ControlledFormGroupData extends ControlledFormData {\n  forms: string[];\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pristine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "valid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NgrxFormAccessor",
            "id": "interface-NgrxFormAccessor-d43bde695a77613b5c4400e8bd73a29dd939fbb379a20206dcef931140745d2dc043d80679e54c9ec503b80569561d7a69037773a2c7d231364212c6f1915f52",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FormGroup} from '@angular/forms';\n\nexport interface NgrxForm {\n  instanceId: string;\n  valid?: boolean;\n  pristine?: boolean;\n  // todo type the errors\n  errors?: any;\n  // todo only allow serializable data types\n  data: {[key: string]: any};\n}\n\nexport interface NgrxFormGroup {\n  instanceId: string;\n  forms: NgrxForm[];\n}\n\nexport interface NgrxFormAccessor {\n  getForm(): FormGroup\n}\n\nexport interface ControlledForm {\n  instanceId: string;\n  formGroup: FormGroup;\n}\n\nexport interface ControlledFormData {\n  instanceId: string;\n  value: any\n  dirty: boolean;\n  pristine?: boolean;\n  valid: boolean;\n  errors: any;\n}\n\nexport interface ControlledFormGroupData extends ControlledFormData {\n  forms: string[];\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "NgrxFormGroup",
            "id": "interface-NgrxFormGroup-d43bde695a77613b5c4400e8bd73a29dd939fbb379a20206dcef931140745d2dc043d80679e54c9ec503b80569561d7a69037773a2c7d231364212c6f1915f52",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FormGroup} from '@angular/forms';\n\nexport interface NgrxForm {\n  instanceId: string;\n  valid?: boolean;\n  pristine?: boolean;\n  // todo type the errors\n  errors?: any;\n  // todo only allow serializable data types\n  data: {[key: string]: any};\n}\n\nexport interface NgrxFormGroup {\n  instanceId: string;\n  forms: NgrxForm[];\n}\n\nexport interface NgrxFormAccessor {\n  getForm(): FormGroup\n}\n\nexport interface ControlledForm {\n  instanceId: string;\n  formGroup: FormGroup;\n}\n\nexport interface ControlledFormData {\n  instanceId: string;\n  value: any\n  dirty: boolean;\n  pristine?: boolean;\n  valid: boolean;\n  errors: any;\n}\n\nexport interface ControlledFormGroupData extends ControlledFormData {\n  forms: string[];\n}\n",
            "properties": [
                {
                    "name": "forms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgrxForm[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PartialConfig",
            "id": "interface-PartialConfig-aa9e63a7c2cd7812a6d3218e349546b5aaffc1ce78ba6c94bc462998df792563ff1e3ff932c05c43c7c027d4c6763da82f309be61acc4c0de370002f9fde2b2a",
            "file": "src/app/pages/partial/lib/partial.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type PartialLoader = () => any;\n\nexport interface PartialConfig {\n  moduleName: string;\n}\nexport interface PartialOptions {\n  moduleName?: string;\n}\n\nexport const partial = (loader: PartialLoader, props: any = {}, config: PartialOptions = {}): any => {\n  const partialConfig = Object.assign({\n    moduleName: 'PartialModule'\n  }, config);\n  return () => {\n    const moduleName: string = partialConfig.moduleName;\n    return loader().then((m: any) => {\n      const module = m[moduleName];\n      return module.partial;\n    }).catch(console.error);\n  }\n}\n",
            "properties": [
                {
                    "name": "moduleName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PartialOptions",
            "id": "interface-PartialOptions-aa9e63a7c2cd7812a6d3218e349546b5aaffc1ce78ba6c94bc462998df792563ff1e3ff932c05c43c7c027d4c6763da82f309be61acc4c0de370002f9fde2b2a",
            "file": "src/app/pages/partial/lib/partial.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type PartialLoader = () => any;\n\nexport interface PartialConfig {\n  moduleName: string;\n}\nexport interface PartialOptions {\n  moduleName?: string;\n}\n\nexport const partial = (loader: PartialLoader, props: any = {}, config: PartialOptions = {}): any => {\n  const partialConfig = Object.assign({\n    moduleName: 'PartialModule'\n  }, config);\n  return () => {\n    const moduleName: string = partialConfig.moduleName;\n    return loader().then((m: any) => {\n      const module = m[moduleName];\n      return module.partial;\n    }).catch(console.error);\n  }\n}\n",
            "properties": [
                {
                    "name": "moduleName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-f199124ab1cb084736620c21a7f2149e9af20198fa4db905da2a0ee2b4babbb397922e9782b45921dc13aff8876e1c9b5ae174971ac6f5ccf256c5d963139bf1",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport {ControlledFormData} from './ngrx-form';\nimport {markAsClean, registerFormGroup, setForm} from './ngrx-form.actions';\nimport {patchAccountRequest} from '../../../../open/pages/account-request/store/account-request.actions';\nimport {group} from '@angular/animations';\n\nexport const ngrxFormFeatureKey = 'ngrxForm';\n\nexport interface State {\n  forms: {[key: string]: ControlledFormData},\n  groups: {[key: string]: string[]}\n}\n\nexport const initialState: State = {\n  forms: {},\n  groups: {}\n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(setForm, (state, {data}) => ({...state, forms: {...state.forms, ...{[data.instanceId]: {...data}}}})),\n  on(registerFormGroup, (state, {groupId, instanceIds}) => {\n    const groups = {...state.groups};\n    groups[groupId] = instanceIds;\n    return {...state, groups};\n  })\n);\n",
            "properties": [
                {
                    "name": "forms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-18738d406b7fb66ad2a89658f8ccbedcedfad7914bd55e5318c9d0cd2a324536f9e62c271c9a187766c5046f7b689ef7089387d117c2627939c36e8e15263bc0-1",
            "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport {patchAccountRequest} from './account-request.actions';\n\nexport const accountRequestFeatureKey = 'accountRequest';\n\nexport enum AccountRequestStatus {\n  pristine = 'pristine',\n  dirty = 'dirty',\n  done = 'done'\n}\n\nexport interface State {\n  accountRequest?: AccountRequest;\n  steps: AccountRequestStep[]\n}\n\nexport interface AccountRequest {\n  firstName?: string;\n}\n\nexport interface AccountRequestStep {\n  index?: number;\n  label: string;\n  title: string;\n  description: string;\n  active?: boolean;\n  disabled?: boolean;\n  status?: AccountRequestStatus;\n}\n\nexport const initialState: State = {\n  steps: []\n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(patchAccountRequest, (state, {patch}) => ({...state, accountRequest: {...state.accountRequest, ...patch}}))\n);\n",
            "properties": [
                {
                    "name": "accountRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountRequest",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountRequestStep[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        }
    ],
    "injectables": [
        {
            "name": "AccountRequestEffects",
            "id": "injectable-AccountRequestEffects-21a6b92942f9e2291777b7be639f1b5c20121343b0c73275f4d211ed31fcb32e1738e7b8b71593d6152efff4594ef485b01ad7b4dd8741b8cd66ea7fea73d784",
            "file": "src/app/phoenix/open/pages/account-request/store/account-request.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\nimport { concatMap } from 'rxjs/operators';\nimport { Observable, EMPTY } from 'rxjs';\nimport * as AccountRequestActions from './account-request.actions';\n\n@Injectable()\nexport class AccountRequestEffects {\n\n  constructor(private actions$: Actions) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NgrxFormEffects",
            "id": "injectable-NgrxFormEffects-3057f999524be0604f0187abd3fcac1cca674fcb2f8f458320518e5497a4914639299beb2bb41ad8a7dec0b8881b95cf0e0f4490475dcee7a3e970e832485381",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.effects.ts",
            "properties": [
                {
                    "name": "registerForm$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(NgrxFormActions.registerForm),\n      /** An EMPTY observable only emits completion. Replace with your own observable API request */\n      switchMap(({instance}) => instance.formGroup.valueChanges.pipe(\n        first(),\n        tap(console.log),\n        map(value => {\n          console.log(value);\n          return setForm({\n            data: {\n              instanceId: instance.instanceId,\n              value,\n              dirty: instance.formGroup.dirty,\n              valid: instance.formGroup.valid,\n              pristine: instance.formGroup.pristine,\n              errors: null\n              // errors: instance.formGroup.errors\n            }\n          })\n        })\n      ))\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\nimport {concatMap, first, map, switchMap, tap} from 'rxjs/operators';\nimport { Observable, EMPTY } from 'rxjs';\nimport * as NgrxFormActions from './ngrx-form.actions';\nimport {setForm} from './ngrx-form.actions';\n\n@Injectable()\nexport class NgrxFormEffects {\n\n\n  registerForm$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(NgrxFormActions.registerForm),\n      /** An EMPTY observable only emits completion. Replace with your own observable API request */\n      switchMap(({instance}) => instance.formGroup.valueChanges.pipe(\n        first(),\n        tap(console.log),\n        map(value => {\n          console.log(value);\n          return setForm({\n            data: {\n              instanceId: instance.instanceId,\n              value,\n              dirty: instance.formGroup.dirty,\n              valid: instance.formGroup.valid,\n              pristine: instance.formGroup.pristine,\n              errors: null\n              // errors: instance.formGroup.errors\n            }\n          })\n        })\n      ))\n    );\n  });\n\n  constructor(private actions$: Actions) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "DynamicComponentDirective",
            "id": "directive-DynamicComponentDirective-2c3b4fa13727091f17309d3d4803ece19fd01208d9dbda59af74aa685de3b664b2bfb1e4f18f86975c128dc8d43b7cda2348aaa30c43c4cff85ed7a76f347f14",
            "file": "src/app/pages/dynamic-components/dynamic-component.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ViewContainerRef} from '@angular/core';\n\n@Directive({\n  selector: '[appDynamicComponent]'\n})\nexport class DynamicComponentDirective {\n  constructor(public viewContainerRef: ViewContainerRef) {\n  }\n}\n",
            "selector": "[appDynamicComponent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NgrxFormDirective",
            "id": "directive-NgrxFormDirective-e2beff9416368453674f2462f3a7749752fa0e1a1b12cce068f4e5d88a3039c90a00091908046e0fd6e35ef72bde18cc0a6769d276826edeee787424f39af680",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form/ngrx-form.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef, Input, TemplateRef, ViewContainerRef, ViewRef} from '@angular/core';\nimport {ControlledForm} from '../ngrx-form-store/ngrx-form';\n\n@Directive({\n  selector: '[appNgrxForm]'\n})\nexport class NgrxFormDirective  {\n  private id!: string;\n  public controlledFormInstance!: ControlledForm;\n\n  constructor(\n    public element: ElementRef) {\n  }\n\n  @Input() appNgrxForm!: any;\n  @Input() set instanceId(id) {\n    this.id = id;\n  };\n\n  get instanceId(): string {\n    return this.id ? this.id : this.appNgrxForm.constructor.name;\n  }\n}\n",
            "selector": "[appNgrxForm]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appNgrxForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "instanceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "controlledFormInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlledForm",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "instanceId": {
                    "name": "instanceId",
                    "setSignature": {
                        "name": "instanceId",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "id",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "instanceId",
                        "type": "string",
                        "returnType": "string",
                        "line": 20
                    }
                }
            }
        },
        {
            "name": "NgrxFormStepDirective",
            "id": "directive-NgrxFormStepDirective-5f006c8fe3784b14c6738630750825ed81e169c0288e37f35eaa173eedf3c8614c00d005ad4d232f6fbc2ffe6f259c67585adf8a89fedfcefdd9f1b191c938e4",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-stepper/ngrx-form-step.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[appNgrxFormStep]'\n})\nexport class NgrxFormStepDirective {\n  @Input() label!: string;\n  @Input() title!: string;\n  @Input() description!: string;\n  @Input() controlledForm!: string;\n  constructor(public template: TemplateRef<any>) { }\n}\n",
            "selector": "[appNgrxFormStep]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "controlledForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NgrxFormStepperFormDirective",
            "id": "directive-NgrxFormStepperFormDirective-8734e70dc5af5526daf51d4448e2f50d2ba52feec0150901c0d28a4044b541416c20652c087d4e3f981c04a1481d2001a4ed12af74dcf81777e1b8c12f434b9c",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-stepper/ngrx-form-stepper-form.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\n@Directive({\n  selector: '[appNgrxFormStepperForm]'\n})\nexport class NgrxFormStepperFormDirective {\n  @Input() label!: string;\n  @Input() description!: string;\n\n  @Input()\n  set form(form: TemplateRef<any>) {\n    this.viewContainerRef.createEmbeddedView(form);\n  }\n\n  constructor(\n    private viewContainerRef: ViewContainerRef\n  ) { }\n\n}\n",
            "selector": "[appNgrxFormStepperForm]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "form": {
                    "name": "form",
                    "setSignature": {
                        "name": "form",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "form",
                                "type": "TemplateRef<any>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "form",
                                "type": "TemplateRef<any>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AccountRequestComponent",
            "id": "component-AccountRequestComponent-5b525d98331acf9ee6c98946b8a02a40a8dc13eccbae65ebac1a32f3d2f946bbd928b1f31a221da99c2c3015aa2fb81e65821b673f5957d85aa55436b98b1e57",
            "file": "src/app/phoenix/open/pages/account-request/account-request.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-request",
            "styleUrls": [
                "./account-request.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-request.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accessForm",
                    "defaultValue": "new FormGroup({\n    firstName: new FormControl()\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    access: this.accessForm,\n    registration: this.registrationForm,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "registrationForm",
                    "defaultValue": "new FormGroup({\n    firstName: new FormControl()\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'app-account-request',\n  templateUrl: './account-request.component.html',\n  styleUrls: ['./account-request.component.scss']\n})\nexport class AccountRequestComponent implements OnInit {\n  public readonly registrationForm = new FormGroup({\n    firstName: new FormControl()\n  })\n  public readonly accessForm = new FormGroup({\n    firstName: new FormControl()\n  });\n  public readonly form = new FormGroup({\n    access: this.accessForm,\n    registration: this.registrationForm,\n  })\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-request.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header-bar></app-header-bar>\n<mat-stepper [linear]=\"true\">\n  <mat-step label=\"Register\">\n    register\n  </mat-step>\n  <mat-step label=\"Access Form\" >\n    access\n  </mat-step>\n  <mat-step label=\"Confirmation\">\n    confirm\n  </mat-step>\n</mat-stepper>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-563b53f25ffa6e7c69f477b59cb6c75cd7b5b0e96967b58128cb651174330f7c39e0203ab88cac6e0f8331021597cda573eeabe8bfb6f67a9b94d765c44bf18b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'sony-sandbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "tester",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'sony-sandbox';\n  tester() {\n\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "DemoComponent",
            "id": "component-DemoComponent-915b67db407dd3c221aad36a5055322b1bfb164309f4818c630c3347f691b7f49d6b9725f504feab6b7e8285ecf4651a2978e90899597a0752dfe7dfab080a14",
            "file": "src/app/pages/partial/demo/demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-demo",
            "styleUrls": [
                "./demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "partialInputBindings",
                    "defaultValue": "{\n    name: 'Forrest'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "partialOutputBindings",
                    "defaultValue": "{\n    reply: (reply: string) => this.reply = reply\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "partialSrc",
                    "defaultValue": "partial(() => import('./partials/sample.partial'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "reply",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {partial} from '../lib/partial';\n\n@Component({\n  selector: 'app-demo',\n  templateUrl: './demo.component.html',\n  styleUrls: ['./demo.component.scss']\n})\nexport class DemoComponent {\n  public readonly partialSrc = partial(() => import('./partials/sample.partial'));\n  public readonly partialInputBindings = {\n    name: 'Forrest'\n  };\n  public readonly partialOutputBindings = {\n    reply: (reply: string) => this.reply = reply\n  }\n\n  public reply: string | undefined;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./demo.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Partial Demo</h1>\n\n<app-partial\n  [src]=\"partialSrc\"\n  [inputBindings]=\"partialInputBindings\"\n  [outputBindings]=\"partialOutputBindings\"\n></app-partial>\n\n<p *ngIf=\"reply\">\n  Forrest replied \"{{reply}}\"\n</p>\n"
        },
        {
            "name": "DynamicComponentsComponent",
            "id": "component-DynamicComponentsComponent-f4dd0633bb95acc45f03cc912edb34c8d82b07807ea59170fff6695c4c3a6e6119ff63a231034034022f8e9f31fe4e409d78517dadf941da83660d5e4532b408",
            "file": "src/app/pages/dynamic-components/dynamic-components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-components",
            "styleUrls": [
                "./dynamic-components.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-components.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dynamicComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicComponentDirective",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DynamicComponentDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadComponent",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {DynamicComponentDirective} from './dynamic-component.directive';\n\n@Component({\n  selector: 'app-dynamic-components',\n  templateUrl: './dynamic-components.component.html',\n  styleUrls: ['./dynamic-components.component.scss']\n})\nexport class DynamicComponentsComponent {\n  // you apply the DynamicComponentDirective to the wrapper so you can access it's viewContainer\n  @ViewChild(DynamicComponentDirective, {static: true}) dynamicComponent!: DynamicComponentDirective;\n\n  async loadComponent(name: string) {\n    // first get the viewContainer reference\n    const viewContainerRef = this.dynamicComponent?.viewContainerRef;\n\n    // clear the container if it has already been loaded\n    viewContainerRef?.clear();\n\n    // lazy load the module\n    const componentLoader = () => import('./greeting/greeting.module').then(module => module.GreetingModule);\n    const greetingModule = await componentLoader();\n\n    // the greeting module exposes a static embed property, which enables us to access the\n    // GreetingComponent reference from the lazy loaded instance\n    const greetingComponent = greetingModule.embed;\n\n    // create the component instance in the view container\n    const componentRef: {instance: any} = viewContainerRef.createComponent(greetingComponent);\n\n    // now you can interact with the instance\n    // setting input values\n    componentRef.instance.name = name;\n    // subscribe to output events\n    componentRef.instance.replied.subscribe((reply: string) => {\n      // todo do something with the reply\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-components.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Dynamic Templates</h1>\n\n<input #name placeholder=\"Enter a name\">\n<button (click)=\"loadComponent(name.value)\">Load Template</button>\n\n<section class=\"template-wrapper\">\n  <div class=\"container\" appDynamicComponent></div>\n</section>\n"
        },
        {
            "name": "FormOneComponent",
            "id": "component-FormOneComponent-d022779cac8c044c266e30944385b44c9833790584e086b23876786476e0d820fe99c1a1b605257ae21db7fe1788241d29680bca2c748593aedb99817380161e",
            "file": "src/app/phoenix/lib/components/ngrx-form/demo/form-one/form-one.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-one",
            "styleUrls": [
                "./form-one.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-one.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl(null, [Validators.required]),\n    phone: new FormControl(null, [Validators.required]),\n    email: new FormControl(null, [Validators.required, Validators.email])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {NgrxFormAccessor} from '../../ngrx-form-store';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-form-one',\n  templateUrl: './form-one.component.html',\n  styleUrls: ['./form-one.component.scss']\n})\nexport class FormOneComponent implements OnInit, NgrxFormAccessor {\n  public readonly form = new FormGroup({\n    name: new FormControl(null, [Validators.required]),\n    phone: new FormControl(null, [Validators.required]),\n    email: new FormControl(null, [Validators.required, Validators.email])\n  })\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getForm(): FormGroup {\n    return this.form;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\nmat-form-field{\n  display: block;\n}\n",
                    "styleUrl": "./form-one.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit",
                "NgrxFormAccessor"
            ],
            "templateData": "<form [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>Full Name</mat-label>\n    <input matInput formControlName=\"name\" placeholder=\"Enter your name\">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>Email</mat-label>\n    <input matInput formControlName=\"email\" type=\"email\" placeholder=\"me@email.com\">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>Phone Number</mat-label>\n    <input matInput formControlName=\"phone\" type=\"text\" placeholder=\"123-456-7890\">\n  </mat-form-field>\n</form>\n"
        },
        {
            "name": "FormStateInspectorComponent",
            "id": "component-FormStateInspectorComponent-eb46fdc8b118bb13efeb9ceb94550764f76147ad77e443188a59ddd7ff6ad3d7044ab4c948d921e7f61bc38e6d882045ce0cf4fd5d449ee7b13fea21025c57e2",
            "file": "src/app/phoenix/lib/components/ngrx-form/demo/form-state-inspector/form-state-inspector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-state-inspector",
            "styleUrls": [
                "./form-state-inspector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-state-inspector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-form-state-inspector',\n  templateUrl: './form-state-inspector.component.html',\n  styleUrls: ['./form-state-inspector.component.scss']\n})\nexport class FormStateInspectorComponent implements OnInit {\n  @Input() state: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-list-item{\n  strong{\n    margin-right: 8px;\n  }\n}\n",
                    "styleUrl": "./form-state-inspector.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <mat-tab-group *ngIf=\"state; else loading\">\n    <mat-tab label=\"Form State\">\n      <mat-list>\n        <mat-list-item>\n          <strong>Instance ID</strong>\n          {{state.instanceId}}\n        </mat-list-item>\n        <mat-list-item>\n          <strong>Pristine</strong>\n          {{state.pristine}}\n        </mat-list-item>\n        <mat-list-item>\n          <strong>Dirty</strong>\n          {{state.dirty}}\n        </mat-list-item>\n        <mat-list-item>\n          <strong>Valid</strong>\n          {{state.valid}}\n        </mat-list-item>\n      </mat-list>\n    </mat-tab>\n    <mat-tab label=\"Data\">\n      <mat-list>\n        <mat-list-item *ngFor=\"let val of state.value | mapObject\">\n          <strong>{{val.key}}</strong>\n          {{val.value}}\n        </mat-list-item>\n      </mat-list>\n    </mat-tab>\n    <mat-tab label=\"Errors ({{(state.errors  | mapObject).length}})\">\n      <mat-list *ngIf=\"state.errors\">\n        <mat-list-item *ngFor=\"let field of state.errors | mapObject\">\n          <strong>{{field.key}}</strong>\n          <span *ngFor=\"let validator of field.value\">\n            validator: {{validator.validator}}\n          </span>\n        </mat-list-item>\n      </mat-list>\n    </mat-tab>\n  </mat-tab-group>\n  <ng-template #loading>\n    <mat-card-content>The form instance has not been loaded yet</mat-card-content>\n  </ng-template>\n</mat-card>\n\n\n"
        },
        {
            "name": "FormTwoComponent",
            "id": "component-FormTwoComponent-96a18176b9a81ac1d86e63cd2dd33c46a79fcb4f14359a8c64f31784d1be24d6fa0e5fca3823813fb0f3a78c476996cebdd3212749a1cc5a004832a8d9cb61a4",
            "file": "src/app/phoenix/lib/components/ngrx-form/demo/form-two/form-two.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-two",
            "styleUrls": [
                "./form-two.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-two.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl(),\n    email: new FormControl(null, [Validators.required, Validators.email])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {NgrxFormAccessor} from '../../ngrx-form-store';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-form-two',\n  templateUrl: './form-two.component.html',\n  styleUrls: ['./form-two.component.scss']\n})\nexport class FormTwoComponent implements OnInit, NgrxFormAccessor {\npublic readonly form = new FormGroup({\n    name: new FormControl(),\n    email: new FormControl(null, [Validators.required, Validators.email])\n  })\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getForm(): FormGroup {\n    return this.form;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-two.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit",
                "NgrxFormAccessor"
            ],
            "templateData": "<form [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>Full Name</mat-label>\n    <input matInput formControlName=\"name\" placeholder=\"Enter your name\">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>Email</mat-label>\n    <input matInput formControlName=\"email\" type=\"email\" placeholder=\"me@email.com\">\n  </mat-form-field>\n</form>\n\n"
        },
        {
            "name": "GreetingComponent",
            "id": "component-GreetingComponent-8fe001ca6aa69329a5109a6f293fc163a10525374e354b2a9e7d990f8cbf2c36c43a2690bf3c487fc96e8c6b5fda4b5460dafc37aa2619caca3d30df811ba10c",
            "file": "src/app/pages/dynamic-components/greeting/greeting.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-greeting",
            "styleUrls": [
                "./greeting.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./greeting.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "replied",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-greeting',\n  templateUrl: './greeting.component.html',\n  styleUrls: ['./greeting.component.scss']\n})\nexport class GreetingComponent implements OnInit {\n  @Input() name: string = '';\n  @Output() replied: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  reply() {\n    this.replied.emit('Hi!');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./greeting.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>Hello {{name}}</p>\n<button (click)=\"reply()\">Reply</button>\n"
        },
        {
            "name": "HeaderBarComponent",
            "id": "component-HeaderBarComponent-a1fb7eb0c3622d37a11ddf9c352ee6d3b152a554d7de2a433e4007af1964bf11836aa9327ba7f093edae5b6d2bfee0c664f0a9f2a93287101934f44f771ebb53",
            "file": "src/app/phoenix/open/components/header-bar/header-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-bar",
            "styleUrls": [
                "./header-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatButtonModule} from '@angular/material/button';\n\n@Component({\n  selector: 'app-header-bar',\n  standalone: true,\n  imports: [CommonModule, MatToolbarModule, MatButtonModule],\n  templateUrl: './header-bar.component.html',\n  styleUrls: ['./header-bar.component.scss']\n})\nexport class HeaderBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar{\n  background: #032444;\n  color: #fff;\n}\n",
                    "styleUrl": "./header-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"dark\">\n  <span>Runner Logo</span>\n</mat-toolbar>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-6a1f8a3ca6cc7eed44a0ba506eea3ed24de8cb2e45fd2a9ae3207035c43fdd5c56e6bdff9da407ef8884933b065c19fb967d30a5c40fd8a3472ca2eec39123cd",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Sony Sandbox</h1>\n\n<ul>\n  <li><a routerLink=\"/dynamic-components\">Lazy Loaded Dynamic Components</a></li>\n  <li><a routerLink=\"/partial\">Partials</a></li>\n  <li><a routerLink=\"/modular-components\">Modular Components</a></li>\n</ul>\n\n<h2>Phoenix</h2>\n<h3>Components</h3>\n<ul>\n  <li><a routerLink=\"/demos/ngrx-forms\">Ngrx Forms</a></li>\n</ul>\n\n<h3>Open App</h3>\n<ul>\n  <li><a routerLink=\"/phoenix/open/account-request\">Account Request</a></li>\n</ul>\n"
        },
        {
            "name": "ModularComponentsComponent",
            "id": "component-ModularComponentsComponent-7ddcc624a759e19ca0ae254ae9b93c8b619bc7d828cf483a8778f02b7268dd5cfd2d956d4f4a83bb15bb2643f1f2fa913bcc49470a64775b7281c1df8639ed17",
            "file": "src/app/pages/modular-components/modular-components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modular-components",
            "styleUrls": [
                "./modular-components.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modular-components.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-modular-components',\n  templateUrl: './modular-components.component.html',\n  styleUrls: ['./modular-components.component.scss']\n})\nexport class ModularComponentsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modular-components.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>modular-components works!</p>\n"
        },
        {
            "name": "NgrxFormComponent",
            "id": "component-NgrxFormComponent-be7f972d1c15c871e833a6d6eeaa90286ff243d68077a794953251e242419f27af6cb89561112c52e2ee03cb453f6342e46b628a5fb6b1e3254d40cf08f68df5",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form/ngrx-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ngrx-form",
            "styleUrls": [
                "./ngrx-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ngrx-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NgrxFormDirective>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "NgrxFormDirective"
                        }
                    ]
                },
                {
                    "name": "forms",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlledForm[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "formTemplates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NgrxFormDirective>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "NgrxFormStepDirective"
                        }
                    ]
                },
                {
                    "name": "subs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "template",
                    "defaultValue": "'loading'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeForm",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "serializeErrors",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeForm",
                    "args": [
                        {
                            "name": "ref",
                            "type": "ControlledForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ instanceId: any; value: any; dirty: any; valid: any; pristine: any; errors: any; }",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ref",
                            "type": "ControlledForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  ElementRef, Input, OnDestroy,\n  OnInit,\n  QueryList, TemplateRef\n} from '@angular/core';\nimport {FormGroup, ValidationErrors} from '@angular/forms';\nimport {NgrxFormDirective} from './ngrx-form.directive';\nimport {Store} from '@ngrx/store';\nimport {registerForm, registerFormGroup, setForm, ControlledForm} from '../ngrx-form-store';\nimport {Subscription} from 'rxjs';\nimport {NgrxFormStepDirective} from '../ngrx-form-stepper/ngrx-form-step.directive';\n\n\n\n@Component({\n  selector: 'app-ngrx-form',\n  templateUrl: './ngrx-form.component.html',\n  styleUrls: ['./ngrx-form.component.scss']\n})\nexport class NgrxFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  public template: string = 'loading';\n\n  private forms: ControlledForm[] = [];\n  private subs: Subscription[] = [];\n\n  constructor(private store: Store) { }\n\n  @ContentChildren(NgrxFormDirective) formElements!: QueryList<NgrxFormDirective>;\n  // todo refactor, the form should not be coupled with the stepper\n  @ContentChildren(NgrxFormStepDirective) formTemplates!: QueryList<NgrxFormDirective>;\n\n  // optional group id, only required for form groups\n  @Input() group!: string;\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    const forms: ControlledForm[] = [];\n    this.formElements.forEach(f => {\n      const component = f.appNgrxForm;\n      if (typeof component.getForm === 'function') {\n        const {instanceId} = f;\n        const controlledFormInstance = {\n          formGroup: this.initializeForm(instanceId, component.getForm()),\n          instanceId: f.instanceId\n        }\n        forms.push(controlledFormInstance);\n        f.controlledFormInstance = controlledFormInstance;\n      }\n    })\n    this.forms = forms;\n    if (this.group) {\n      this.store.dispatch(registerFormGroup({groupId: this.group, instanceIds: forms.map(f => f.instanceId)}));\n    }\n    forms.forEach(formRef => {\n      const sub = formRef.formGroup.valueChanges.subscribe(value => this.store.dispatch(setForm({\n        data: this.serializeForm(formRef)\n      })));\n      this.subs.push(sub);\n    });\n  }\n\n  initializeForm(id: string, form: FormGroup): FormGroup {\n    const controls = form.controls;\n    const newForm = new FormGroup(controls, {updateOn: 'blur'});\n    return newForm;\n  }\n\n  serializeForm(ref: ControlledForm) {\n    const data = {\n      instanceId: ref.instanceId,\n      value: ref.formGroup.value,\n      dirty: ref.formGroup.dirty,\n      valid: ref.formGroup.valid,\n      pristine: ref.formGroup.pristine,\n      errors: this.serializeErrors(ref.formGroup)\n    };\n    return data;\n  }\n\n  serializeErrors(form: FormGroup) {\n    const errors: {[key: string]: any} = {};\n    return Object.keys(form.controls).reduce((errors, key) => {\n      const control = form.get(key);\n      if (! control) {\n        // stop ts from complaining\n        return errors;\n      }\n      const controlErrors: ValidationErrors | undefined | null = control.errors;\n      if (!! controlErrors) {\n        errors[key] = Object.keys(controlErrors).map(validator => ({\n          validator,\n          value: controlErrors[validator]\n        }));\n      }\n      return errors;\n    }, errors);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subs) {\n      this.subs.forEach(s => s.unsubscribe());\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "./ngrx-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"ngrx-form\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "NgrxFormDemoComponent",
            "id": "component-NgrxFormDemoComponent-139f63e6b042b4e3e21651dff4c93648e802d66698d24b0f7930c5e6de50bf2fd1ded65823a266706edf8f4913c898b76091982a59408229968bf2b13b3ea0a2",
            "file": "src/app/phoenix/lib/components/ngrx-form/demo/ngrx-form-demo/ngrx-form-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ngrx-form-demo",
            "styleUrls": [
                "./ngrx-form-demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ngrx-form-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groupFormState$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "singleFormState$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\nimport {selectForm, selectFormGroup} from '../../ngrx-form-store';\n\n@Component({\n  selector: 'app-ngrx-form-demo',\n  templateUrl: './ngrx-form-demo.component.html',\n  styleUrls: ['./ngrx-form-demo.component.scss']\n})\nexport class NgrxFormDemoComponent implements OnInit {\n  public singleFormState$!: Observable<any>;\n  public groupFormState$!: Observable<any>;\n\n  constructor(private store: Store) {\n    this.singleFormState$ = store.select(selectForm('registration'));\n    this.groupFormState$ = store.select(selectFormGroup('signupForm'));\n    this.groupFormState$.subscribe(console.log);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\n  display: block;\n  padding: 2.5rem;\n}\n\n.demo{\n  display: flex;\n  .form {\n    width: 320px;\n    margin-right: 2.5rem;\n  }\n}\n",
                    "styleUrl": "./ngrx-form-demo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Ngrx Form Component</h1>\n<p>This component wraps a form and pushes its state to the ngrx store.</p>\n\n<section>\n  <h2>Single Form</h2>\n\n  <div class=\"demo\">\n    <div class=\"form\">\n      <h3>Account Info</h3>\n      <app-ngrx-form>\n        <app-form-one #registration [appNgrxForm]=\"registration\" instanceId=\"registration\"></app-form-one>\n      </app-ngrx-form>\n    </div>\n    <app-form-state-inspector [state]=\"singleFormState$ | async\"></app-form-state-inspector>\n  </div>\n\n</section>\n\n<section>\n  <h2>Form Group</h2>\n\n  <app-ngrx-form group=\"signupForm\">\n    <app-form-one #groupRegistration [appNgrxForm]=\"groupRegistration\" instanceId=\"registrationFromGroup\"></app-form-one>\n    <app-form-one #groupPreferences [appNgrxForm]=\"groupPreferences\" instanceId=\"preferencesFromGroup\"></app-form-one>\n  </app-ngrx-form>\n\n  <a routerLink=\"stepper\">View Form Stepper demo</a>\n</section>\n"
        },
        {
            "name": "NgrxFormStepperComponent",
            "id": "component-NgrxFormStepperComponent-2a929453fc3b571ca66134fbcf7c74467bdffa5461e5997b90a87d90c9d4c797545dbf266d711cd7da615f4cb4bfa15ab451f6517f546aa8b260164ac31dd25c",
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-stepper/ngrx-form-stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ngrx-form-stepper",
            "styleUrls": [
                "./ngrx-form-stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ngrx-form-stepper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgrxFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgrxFormComponent"
                        }
                    ]
                },
                {
                    "name": "formState$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "steps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disableNext",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disablePrevious",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getControlledFormId",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stepIsValid",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component, ContentChild,\n  ContentChildren,\n  OnInit,\n  QueryList, TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {NgrxFormComponent} from '../ngrx-form/ngrx-form.component';\nimport {NgrxFormStepDirective} from './ngrx-form-step.directive';\nimport {NgrxFormDirective} from '../ngrx-form';\nimport {Observable, of} from 'rxjs';\nimport {selectForm, selectFormGroup} from '../ngrx-form-store';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-ngrx-form-stepper',\n  templateUrl: './ngrx-form-stepper.component.html',\n  styleUrls: ['./ngrx-form-stepper.component.scss']\n})\nexport class NgrxFormStepperComponent implements OnInit, AfterViewInit {\n  public steps: any[] = [];\n  public formState$!: Observable<any>;\n  constructor(\n    private store: Store\n  ) { }\n  @ContentChild(NgrxFormComponent) form!: NgrxFormComponent;\n\n  disablePrevious(index: number): Observable<boolean> {\n    if (index === 0 || ! this.formState$) {\n      return of(true);\n    }\n    return of(false);\n  }\n\n  disableNext(index: number): Observable<boolean> {\n    if (index >= this.steps.length - 1) {\n      return of(true);\n    }\n    return of(false);\n  }\n\n  stepIsValid(index: number): Observable<boolean> {\n    const controlledForm = this.getControlledFormId(index);\n    if (! controlledForm) {\n      return of(true);\n    }\n    return this.store.select(selectForm(controlledForm)).pipe(\n      map(f => f ? f.valid : false)\n    )\n  }\n\n  getControlledFormId(index: number) {\n    const step = this.steps[index];\n    return step.controlledForm;\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this.form.formTemplates.forEach(template => {\n      this.steps.push(template);\n    });\n    this.formState$ = this.store.select(selectFormGroup(this.form.group));\n    this.stepIsValid(0).subscribe(console.warn);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar{\n  background: none;\n}\n\nmat-card-title{\n  flex: 1;\n  text-align: center;\n}\n\np{\n  text-align: center;\n}\n",
                    "styleUrl": "./ngrx-form-stepper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"ngrx-form-stepper\" *ngIf=\"steps\">\n  <mat-stepper>\n    <mat-step *ngFor=\"let step of steps; let i = index\" [label]=\"step.label\">\n      <mat-card>\n        <mat-toolbar>\n          <button mat-button matStepperPrevious [disabled]=\"disablePrevious(i) | async\">Back</button>\n          <mat-card-title>{{step.title}}</mat-card-title>\n          <button mat-button matStepperNext [disabled]=\"disableNext(i) | async\">Next</button>\n        </mat-toolbar>\n        <mat-card-content>\n          <p>{{step.description}}</p>\n        </mat-card-content>\n      </mat-card>\n      <div appNgrxFormStepperForm [form]=\"step.template\"></div>\n    </mat-step>\n  </mat-stepper>\n</div>\n\n\n\n<ng-content></ng-content>\n\n\n"
        },
        {
            "name": "NgrxFormStepperDemoComponent",
            "id": "component-NgrxFormStepperDemoComponent-67f3ab132dfc1f4d186eec8f06826f627cb1d8d941daeeafb0cc76cc7a3b839b3b3c415cab161ea47716516c50a71d93bd2adb550c9ea37d397fa3345a8ff660",
            "file": "src/app/phoenix/lib/components/ngrx-form/demo/ngrx-form-stepper-demo/ngrx-form-stepper-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ngrx-form-stepper-demo",
            "styleUrls": [
                "./ngrx-form-stepper-demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ngrx-form-stepper-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-ngrx-form-stepper-demo',\n  templateUrl: './ngrx-form-stepper-demo.component.html',\n  styleUrls: ['./ngrx-form-stepper-demo.component.scss']\n})\nexport class NgrxFormStepperDemoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./ngrx-form-stepper-demo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-ngrx-form-stepper>\n  <app-ngrx-form group=\"signupForm\">\n    <ng-template appNgrxFormStep\n                 controlledForm=\"registrationFromGroup\"\n                 label=\"Register\"\n                 title=\"Please create an account\"\n                 description=\"Complete this form and click next\">\n      <app-form-one #groupRegistration [appNgrxForm]=\"groupRegistration\" instanceId=\"registrationFromGroup\"></app-form-one>\n    </ng-template>\n\n    <ng-template appNgrxFormStep\n                 controlledForm=\"preferencesFromGroup\"\n                 label=\"Preferences\"\n                 title=\"Account Preferences\"\n                 description=\"Please let us know how you would like us to stay in touch\">\n      <app-form-two #groupPreferences [appNgrxForm]=\"groupPreferences\" instanceId=\"preferencesFromGroup\"></app-form-two>\n    </ng-template>\n  </app-ngrx-form>\n</app-ngrx-form-stepper>\n"
        },
        {
            "name": "PartialComponent",
            "id": "component-PartialComponent-d258709412132013d3d0f9fb83b2a3e4c9d270b6ceda4166705e7d3a764b4641478f21554acfd119582fe6f6b7e84661d037b96ac50bdd86669587ae025342c3",
            "file": "src/app/pages/partial/lib/partial/partial.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-partial",
            "styleUrls": [
                "./partial.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputBindings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "outputBindings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadPartial",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, ViewChild, ViewContainerRef} from '@angular/core';\n\n@Component({\n  selector: 'app-partial',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./partial.component.scss']\n})\nexport class PartialComponent implements OnInit{\n  @Input() src: any;\n  @Input() inputBindings: any;\n  @Input() outputBindings: any;\n  constructor(public viewContainerRef: ViewContainerRef) {\n  }\n\n  async loadPartial() {\n    if ( typeof this.src === undefined) {\n      throw new Error('required src attribute not set')\n      return;\n    }\n    const partial = await this.src();\n    const componentRef: {instance: any} = this.viewContainerRef.createComponent(partial);\n    const {instance} = componentRef;\n    if (this.inputBindings) {\n      Object.keys(this.inputBindings).forEach(k => {\n        instance[k] = this.inputBindings[k];\n      });\n    }\n    if (this.outputBindings) {\n      Object.keys(this.outputBindings).forEach(k => {\n        // todo handle unsubscribing\n        instance[k].subscribe(this.outputBindings[k]);\n      });\n    }\n  }\n\n  ngOnInit(): Promise<void> {\n    return this.loadPartial();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./partial.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SampleComponent",
            "id": "component-SampleComponent-2fac9fe6785213813d37ba24ae0f95c7dfc011def42d9119872d8dfddee82c3fb9cac2bc8509cec2c4dc2f763f1b29e4bb70f18bd59c5c430b9fb6e7b80b8088",
            "file": "src/app/pages/partial/demo/partials/sample.partial.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<span>Hello {{name}}</span> <button (click)=\"reply.emit('Look, this works!')\">Reply</button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "reply",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, NgModule, Output, ViewContainerRef} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  template: `<span>Hello {{name}}</span> <button (click)=\"reply.emit('Look, this works!')\">Reply</button>`,\n})\nexport class SampleComponent {\n  @Input() name: string | undefined;\n  @Output() reply: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() {}\n}\n\n@NgModule({\n  declarations: [\n    SampleComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class PartialModule {\n  static partial = SampleComponent;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            }
        }
    ],
    "modules": [
        {
            "name": "AccountRequestModule",
            "id": "module-AccountRequestModule-3a5ec5bf5f44d0f00f3d49a0d7bfe59842b3c77c975514c823d3692814151cdd51fa26d650bc3347fb9c5fa3a9eece431cde76607739ed140c3b458fdf1fef10",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/open/pages/account-request/account-request.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccountRequestComponent } from './account-request.component';\nimport {HeaderBarComponent} from '../../components/header-bar/header-bar.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromAccountRequest from './store/account-request.reducer';\nimport { AccountRequestEffects } from './store/account-request.effects';\nimport {StoreModule} from '@ngrx/store';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\n\n\n@NgModule({\n  declarations: [\n    AccountRequestComponent,\n  ],\n  exports: [\n    AccountRequestComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    MatIconModule,\n    MatStepperModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    StoreModule.forFeature(fromAccountRequest.accountRequestFeatureKey, fromAccountRequest.reducer),\n    EffectsModule.forFeature([AccountRequestEffects])\n  ]\n})\nexport class AccountRequestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountRequestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountRequestComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-1991874f20ea6236bd97d1c49ddc010a89656f5f6b3cfae80417608732e3ece950fc8a7812ceec672e0a12bd4a59a346e221f59eab2c8e43f282230ac5ba5813",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { StoreModule } from '@ngrx/store';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    StoreModule.forRoot({}, {}),\n    EffectsModule.forRoot([]),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-5a26a2f93dc126fa1ee50c5b3d61452df36ac8419d1d4a631c14a9d4fbf7f72d659e04c896b482adbabcb72a18a09536492410a156e50327f805bc8e792820ea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'home',\n    loadChildren: () => \"import('./pages/home/home.module').then( m => m.HomeModule)\"\n  },\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'dynamic-components',\n    loadChildren: () => \"import('./pages/dynamic-components/dynamic-components.module').then( m => m.DynamicComponentsModule)\"\n  },\n  {\n    path: 'partial',\n    loadChildren: () => \"import('./pages/partial/partial.module').then( m => m.PartialModule)\"\n  },\n  {\n    path: 'modular-components',\n    loadChildren: () => \"import('./pages/modular-components/modular-components.module').then( m => m.ModularComponentsModule)\"\n  },\n  {\n    path: 'phoenix',\n    loadChildren: () => \"import('./phoenix/phoenix.module').then(m => m.PhoenixModule)\"\n  },\n  {\n    path: 'demos',\n    children: [\n      {\n        path: 'ngrx-forms',\n        loadChildren: () => \"import('./phoenix/lib/components/ngrx-form/demo/demo.module').then(m => m.DemoModule)\"\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoModule",
            "id": "module-DemoModule-c28482f9a19d5145721ccca25a4fe2a461ffb9e321f002a31975a1590f854ee0307172dd86b3bf4a13d7253c4010b9c3cae47655ddf640c9ba776f520da5b5ab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/lib/components/ngrx-form/demo/demo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DemoRoutingModule } from './demo-routing.module';\nimport { NgrxFormDemoComponent } from './ngrx-form-demo/ngrx-form-demo.component';\nimport { FormOneComponent } from './form-one/form-one.component';\nimport { FormTwoComponent } from './form-two/form-two.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatListModule} from '@angular/material/list';\nimport {MapObjectPipe} from '../../../pipes/map-object.pipe';\nimport { FormStateInspectorComponent } from './form-state-inspector/form-state-inspector.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {NgrxFormModule} from '../ngrx-form/ngrx-form.module';\nimport {NgrxFormStepperModule} from '../ngrx-form-stepper/ngrx-form-stepper.module';\nimport { NgrxFormStepperDemoComponent } from './ngrx-form-stepper-demo/ngrx-form-stepper-demo.component';\n\n\n\n@NgModule({\n  declarations: [\n    NgrxFormDemoComponent,\n    FormOneComponent,\n    FormTwoComponent,\n    FormStateInspectorComponent,\n    NgrxFormStepperDemoComponent\n  ],\n  imports: [\n    CommonModule,\n    DemoRoutingModule,\n    MapObjectPipe,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatListModule,\n    MatTabsModule,\n    NgrxFormModule,\n    NgrxFormStepperModule,\n    ReactiveFormsModule\n  ]\n})\nexport class DemoModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormOneComponent"
                        },
                        {
                            "name": "FormStateInspectorComponent"
                        },
                        {
                            "name": "FormTwoComponent"
                        },
                        {
                            "name": "NgrxFormDemoComponent"
                        },
                        {
                            "name": "NgrxFormStepperDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DemoRoutingModule"
                        },
                        {
                            "name": "MapObjectPipe"
                        },
                        {
                            "name": "NgrxFormModule"
                        },
                        {
                            "name": "NgrxFormStepperModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoRoutingModule",
            "id": "module-DemoRoutingModule-e393b0a3d3546d996b82158703785bd20089322cc5e953bd86d52c34186bfbb522902cbae904a0cd28aeb9e291925be06c80f27348c5147fd81193ad3dfc2616",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/lib/components/ngrx-form/demo/demo-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {NgrxFormDemoComponent} from './ngrx-form-demo/ngrx-form-demo.component';\nimport {NgrxFormStepperDemoComponent} from './ngrx-form-stepper-demo/ngrx-form-stepper-demo.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NgrxFormDemoComponent\n  },\n  {\n    path: 'stepper',\n    component: NgrxFormStepperDemoComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DemoRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicComponentsModule",
            "id": "module-DynamicComponentsModule-8e0e7eaa16995d85373ef2337b9312956c738baac0f6e898c5614e21a797abf88869d82f44801298daa1c7d596ee71320bc0d58a0246b826243368af3a6ca6b2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/dynamic-components/dynamic-components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DynamicComponentsRoutingModule } from './dynamic-components-routing.module';\nimport {DynamicComponentsComponent} from './dynamic-components.component';\nimport { DynamicComponentDirective } from './dynamic-component.directive';\n\n\n@NgModule({\n  declarations: [\n    DynamicComponentsComponent,\n    DynamicComponentDirective\n  ],\n  imports: [\n    CommonModule,\n    DynamicComponentsRoutingModule\n  ]\n})\nexport class DynamicComponentsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynamicComponentDirective"
                        },
                        {
                            "name": "DynamicComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicComponentsRoutingModule",
            "id": "module-DynamicComponentsRoutingModule-8aaa97e85eeceb44de83972d4000ff725f623867f725b13a2a754f2fecbe582c00c1f3b8d86f81a0e8b3a9b9f7c207c70a4840fb72721a47f9197cf713783147",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/dynamic-components/dynamic-components-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {DynamicComponentsComponent} from './dynamic-components.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DynamicComponentsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DynamicComponentsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GreetingModule",
            "id": "module-GreetingModule-7da921c951d1535c66d44113fb0d48d46194c5222efd5a89183d3e7cf61b5118f7c35df7a1591006fd3583286ac8216cafe8c0373383f65f218bed6869538658",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/dynamic-components/greeting/greeting.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GreetingComponent } from './greeting.component';\n\n\n\n@NgModule({\n  declarations: [\n    GreetingComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class GreetingModule {\n  static embed = GreetingComponent;\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GreetingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-a916b5b5d0ec2248c490b347c7b94095c1b74414364ec62e33c7a8d3a9ecba31d3738abd1778dc430da9f1f4f349018301076a368dd3a7ae3d01c299c2eac594",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HomeRoutingModule } from './home-routing.module';\nimport {HomeComponent} from './home.component';\n\n\n@NgModule({\n  declarations: [\n    HomeComponent\n  ],\n  imports: [\n    CommonModule,\n    HomeRoutingModule\n  ]\n})\nexport class HomeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "id": "module-HomeRoutingModule-548a8cde8683fd513208012d88cd89bbf021ec68a4e0a645da817012d8cfbdd6211b060fd67aa3ca0c6adcb679ba67821db7375587731005771790b23f0f0219",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/home/home-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {HomeComponent} from './home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModularComponentsModule",
            "id": "module-ModularComponentsModule-1a46c94e93d3c68d257d5ad8b08ac8ca741a63f4b908bfa8592ba2ebe0073674f6c0e47b14cce472b40435b888d8aab15aa99a688195ec5d5a9bd1daf9ba3416",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/modular-components/modular-components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ModularComponentsRoutingModule } from './modular-components-routing.module';\nimport { ModularComponentsComponent } from './modular-components.component';\n\n\n@NgModule({\n  declarations: [\n    ModularComponentsComponent\n  ],\n  imports: [\n    CommonModule,\n    ModularComponentsRoutingModule\n  ]\n})\nexport class ModularComponentsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModularComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModularComponentsRoutingModule",
            "id": "module-ModularComponentsRoutingModule-ca1f28330339d7a3dc5a6dd5c9fd6b9cce9b740870f3e2e844f0d16d2a7bf86069af0ef010ba6cef4a1a054b52d9f1e8a664b4e78c2a055f73b6e4c2abee54ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/modular-components/modular-components-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {ModularComponentsComponent} from './modular-components.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ModularComponentsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ModularComponentsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgrxFormModule",
            "id": "module-NgrxFormModule-e299c0a29be87a81e1251feae3b6eeb18db2224cb48f13fb5a97ef69e55023dcf797107333f23158ec48cbef0282d7690a277803e2d5e777a6b9333bbeabc087",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form/ngrx-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {NgrxFormComponent} from './ngrx-form.component';\nimport {NgrxFormDirective} from './ngrx-form.directive';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {NgrxFormStoreModule} from '../ngrx-form-store';\n\n\n\n@NgModule({\n  declarations: [\n    NgrxFormComponent,\n    NgrxFormDirective\n  ],\n  exports: [\n    NgrxFormComponent,\n    NgrxFormDirective\n  ],\n  imports: [\n    CommonModule,\n    NgrxFormStoreModule,\n    ReactiveFormsModule\n  ]\n})\nexport class NgrxFormModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgrxFormComponent"
                        },
                        {
                            "name": "NgrxFormDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgrxFormStoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgrxFormComponent"
                        },
                        {
                            "name": "NgrxFormDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgrxFormStepperModule",
            "id": "module-NgrxFormStepperModule-e89433ea0f7cdb724287c8e75b6f27515cb327701838a023874359d8d066e3210c80c2be19103c949a7b07d6fd17f08122eefeca2a38b7df2c354bf346effb8b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-stepper/ngrx-form-stepper.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {NgrxFormStepDirective} from './ngrx-form-step.directive';\nimport {NgrxFormStepperComponent} from './ngrx-form-stepper.component';\nimport {NgrxFormStoreModule} from '../ngrx-form-store';\nimport {NgrxFormModule} from '../ngrx-form';\nimport {NgrxFormStepperFormDirective} from './ngrx-form-stepper-form.directive';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatToolbarModule} from '@angular/material/toolbar';\n\n\n\n@NgModule({\n  declarations: [\n    NgrxFormStepDirective,\n    NgrxFormStepperComponent,\n    NgrxFormStepperFormDirective\n  ],\n  exports: [\n    NgrxFormStepDirective,\n    NgrxFormStepperComponent\n  ],\n  imports: [\n    CommonModule,\n    NgrxFormStoreModule,\n    NgrxFormModule,\n    MatStepperModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCardModule,\n    MatToolbarModule\n  ]\n})\nexport class NgrxFormStepperModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgrxFormStepDirective"
                        },
                        {
                            "name": "NgrxFormStepperComponent"
                        },
                        {
                            "name": "NgrxFormStepperFormDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgrxFormModule"
                        },
                        {
                            "name": "NgrxFormStoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgrxFormStepDirective"
                        },
                        {
                            "name": "NgrxFormStepperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgrxFormStoreModule",
            "id": "module-NgrxFormStoreModule-2462cc9d452c8f1377466d0fc8eecddd7f9a22f56071b914fa418459f17aa730bd2a615825ac666aa7b1eb22391e349461c63568808f09785632c55140ed8cde",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form-store.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {StoreModule} from '@ngrx/store';\nimport * as fromForm from './ngrx-form.reducer';\nimport {EffectsModule} from '@ngrx/effects';\nimport {NgrxFormEffects} from './ngrx-form.effects';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(fromForm.ngrxFormFeatureKey, fromForm.reducer),\n    EffectsModule.forFeature([NgrxFormEffects])\n  ]\n})\nexport class NgrxFormStoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OpenModule",
            "id": "module-OpenModule-31c1bb7e4fe5515d6cf5e8373c907cc29444159a6e7946904f57ff06cca2bb913a51aaaf3b11b71874fb6a17671dd75aa513c4f978b4538b704515daf3fd8a7c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/open/open.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OpenRoutingModule } from './open-routing.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule,\n    OpenRoutingModule\n  ]\n})\nexport class OpenModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "OpenRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OpenRoutingModule",
            "id": "module-OpenRoutingModule-1e622e0e1b5ff20337e7278e4124c90d06c477d710547b14a6c65cbd946bbbc41aedd20c2af634036c5290dbc4cd680521fa97e75b430cdda2c987aaccdf936b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/open/open-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class OpenRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PartialModule",
            "id": "module-PartialModule-09e5ee177aa53335840fbbe6b58da4af77fb77cc1b5b2e0584a3e00d65c6f03ea52ebe1fd85db0a0a934d2347f734c4cc3b1fed1d079208ad33ecacedc0cfb2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/partial/partial.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PartialRoutingModule } from './partial-routing.module';\nimport { DemoComponent } from './demo/demo.component';\nimport { PartialComponent } from './lib/partial/partial.component';\n\n@NgModule({\n  declarations: [\n    DemoComponent,\n    PartialComponent\n  ],\n  imports: [\n    CommonModule,\n    PartialRoutingModule\n  ]\n})\nexport class PartialModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DemoComponent"
                        },
                        {
                            "name": "PartialComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PartialRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PartialModule",
            "id": "module-PartialModule-2fac9fe6785213813d37ba24ae0f95c7dfc011def42d9119872d8dfddee82c3fb9cac2bc8509cec2c4dc2f763f1b29e4bb70f18bd59c5c430b9fb6e7b80b8088-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/partial/demo/partials/sample.partial.ts",
            "methods": [],
            "sourceCode": "import {Component, EventEmitter, Input, NgModule, Output, ViewContainerRef} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  template: `<span>Hello {{name}}</span> <button (click)=\"reply.emit('Look, this works!')\">Reply</button>`,\n})\nexport class SampleComponent {\n  @Input() name: string | undefined;\n  @Output() reply: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() {}\n}\n\n@NgModule({\n  declarations: [\n    SampleComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class PartialModule {\n  static partial = SampleComponent;\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PartialRoutingModule",
            "id": "module-PartialRoutingModule-c7d537ab35456387d75c2f83e6cdde69fed87852350a08a1f5d786b8ac02e9ae425ed9e872f56a170001c2544385992a8bad44200af3fbb915ea1edef7e65301",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/partial/partial-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {DemoComponent} from './demo/demo.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DemoComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PartialRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PhoenixModule",
            "id": "module-PhoenixModule-3cc7247371012463e1ceb8814eea667d88cf9e5a5dd79f19ff597075cae0f3b10cbb62ec379055fe135363ba711bcc8c66f91bd043ddd9231c622e2063a40d29",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/phoenix.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PhoenixRoutingModule } from './phoenix-routing.module';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    PhoenixRoutingModule\n  ]\n})\nexport class PhoenixModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PhoenixRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PhoenixRoutingModule",
            "id": "module-PhoenixRoutingModule-94c86c321c73e3e0f6ceb2fd88f140ff985765e82024e6444564f4732a1396446776ac5e3fc2db001d891ec42cdff976b37df1cc257c640fdb39c411098a0d9e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/phoenix/phoenix-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'open',\n\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PhoenixRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "accountRequestFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'accountRequest'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  forms: {},\n  groups: {}\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  steps: []\n}"
            },
            {
                "name": "markAsClean",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgrxForm] Mark As Clean',\n  props<{groupId?: string, formId?: string}>()\n)"
            },
            {
                "name": "nextStep",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[AccountRequest] Patch AccountRequest'\n)"
            },
            {
                "name": "ngrxFormFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ngrxForm'"
            },
            {
                "name": "partial",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/partial/lib/partial.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(loader: PartialLoader, props: any = {}, config: PartialOptions = {}): any => {\n  const partialConfig = Object.assign({\n    moduleName: 'PartialModule'\n  }, config);\n  return () => {\n    const moduleName: string = partialConfig.moduleName;\n    return loader().then((m: any) => {\n      const module = m[moduleName];\n      return module.partial;\n    }).catch(console.error);\n  }\n}"
            },
            {
                "name": "patchAccountRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[AccountRequest] Patch AccountRequest',\n  props<{patch: any}>()\n)"
            },
            {
                "name": "previousStep",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[AccountRequest] Patch AccountRequest'\n)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/open/components/HeaderBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/open/pages/account-request/AccountRequest.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(setForm, (state, {data}) => ({...state, forms: {...state.forms, ...{[data.instanceId]: {...data}}}})),\n  on(registerFormGroup, (state, {groupId, instanceIds}) => {\n    const groups = {...state.groups};\n    groups[groupId] = instanceIds;\n    return {...state, groups};\n  })\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(patchAccountRequest, (state, {patch}) => ({...state, accountRequest: {...state.accountRequest, ...patch}}))\n)"
            },
            {
                "name": "registerForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgrxForm] Register Form',\n  props<{instance: ControlledForm}>()\n)"
            },
            {
                "name": "registerFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgrxForm] Register Form Group',\n  props<{groupId: string, instanceIds: string[]}>()\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "selectAccountRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAccountRequestState,\n  (state) => state.accountRequest ? {...state.accountRequest} : null\n)"
            },
            {
                "name": "selectAccountRequestState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromAccountRequest.State>(\n  fromAccountRequest.accountRequestFeatureKey\n)"
            },
            {
                "name": "selectActiveStep",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAccountRequestState,\n  (state) => {\n    if (state.steps) {\n      return [...state.steps]\n    }\n    return [];\n  }\n)"
            },
            {
                "name": "selectForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(instanceId: string) => createSelector(\n  selectNgrxFormState,\n  (state) => {\n    return state.forms[instanceId] ? {...state.forms[instanceId]} : undefined;\n  }\n)"
            },
            {
                "name": "selectFormGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(groupId: string) => createSelector(\n  selectNgrxFormState,\n  (state) => {\n    const group = state.groups[groupId];\n    if (group) {\n      const res: ControlledFormGroupData = {\n        forms: [...group],\n        instanceId: groupId,\n        dirty: false,\n        valid: true,\n        errors: {},\n        value: {}\n      };\n      group.forEach(f => {\n          const form = state.forms[f];\n          if (! form) {\n            return undefined;\n          }\n          if (form.dirty) {\n            res.dirty = true;\n          }\n          if (! form.valid) {\n            res.valid = false;\n            res.errors[f] = {...form.errors}\n          }\n          res.value[f] = {...form.value};\n          return;\n      });\n      // const controls = group.map(f => {\n      //   const form = state.forms[f];\n      //   if (! form) {\n      //     return undefined;\n      //   }\n      //   res.value[f] = {...form.value};\n      // }).filter(f => !! f);\n      return res;\n    }\n    return undefined;\n  }\n)"
            },
            {
                "name": "selectNgrxFormState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromNgrxForm.State>(\n  fromNgrxForm.ngrxFormFeatureKey\n)"
            },
            {
                "name": "selectSteps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAccountRequestState,\n  (state) => {\n    if (state.steps) {\n      return [...state.steps]\n    }\n    return [];\n  }\n)"
            },
            {
                "name": "setActiveStep",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[AccountRequest] Set Active Step',\n  props<{index: number}>()\n)"
            },
            {
                "name": "setForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[NgrxForm] Set Form',\n  props<{data: ControlledFormData}>()\n)"
            },
            {
                "name": "setSteps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[AccountRequest] Set Steps',\n  props<{steps: AccountRequestStep[]}>()\n)"
            },
            {
                "name": "setStepStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[AccountRequest] Set Step Status',\n  props<{index: number, status: AccountRequestStatus}>()\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/open/components/HeaderBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HeaderBarComponent>",
                "defaultValue": "(args: HeaderBarComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/open/pages/account-request/AccountRequest.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AccountRequestComponent>",
                "defaultValue": "(args: AccountRequestComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "PartialLoader",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/pages/partial/lib/partial.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "AccountRequestStatus",
                "childs": [
                    {
                        "name": "pristine",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pristine"
                    },
                    {
                        "name": "dirty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dirty"
                    },
                    {
                        "name": "done",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "done"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts"
            }
        ],
        "groupedVariables": {
            "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts": [
                {
                    "name": "accountRequestFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'accountRequest'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  steps: []\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(patchAccountRequest, (state, {patch}) => ({...state, accountRequest: {...state.accountRequest, ...patch}}))\n)"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  forms: {},\n  groups: {}\n}"
                },
                {
                    "name": "ngrxFormFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ngrxForm'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(setForm, (state, {data}) => ({...state, forms: {...state.forms, ...{[data.instanceId]: {...data}}}})),\n  on(registerFormGroup, (state, {groupId, instanceIds}) => {\n    const groups = {...state.groups};\n    groups[groupId] = instanceIds;\n    return {...state, groups};\n  })\n)"
                }
            ],
            "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts": [
                {
                    "name": "markAsClean",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgrxForm] Mark As Clean',\n  props<{groupId?: string, formId?: string}>()\n)"
                },
                {
                    "name": "registerForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgrxForm] Register Form',\n  props<{instance: ControlledForm}>()\n)"
                },
                {
                    "name": "registerFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgrxForm] Register Form Group',\n  props<{groupId: string, instanceIds: string[]}>()\n)"
                },
                {
                    "name": "setForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[NgrxForm] Set Form',\n  props<{data: ControlledFormData}>()\n)"
                }
            ],
            "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts": [
                {
                    "name": "nextStep",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[AccountRequest] Patch AccountRequest'\n)"
                },
                {
                    "name": "patchAccountRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[AccountRequest] Patch AccountRequest',\n  props<{patch: any}>()\n)"
                },
                {
                    "name": "previousStep",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[AccountRequest] Patch AccountRequest'\n)"
                },
                {
                    "name": "setActiveStep",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[AccountRequest] Set Active Step',\n  props<{index: number}>()\n)"
                },
                {
                    "name": "setSteps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[AccountRequest] Set Steps',\n  props<{steps: AccountRequestStep[]}>()\n)"
                },
                {
                    "name": "setStepStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[AccountRequest] Set Step Status',\n  props<{index: number, status: AccountRequestStatus}>()\n)"
                }
            ],
            "src/app/pages/partial/lib/partial.ts": [
                {
                    "name": "partial",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/partial/lib/partial.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(loader: PartialLoader, props: any = {}, config: PartialOptions = {}): any => {\n  const partialConfig = Object.assign({\n    moduleName: 'PartialModule'\n  }, config);\n  return () => {\n    const moduleName: string = partialConfig.moduleName;\n    return loader().then((m: any) => {\n      const module = m[moduleName];\n      return module.partial;\n    }).catch(console.error);\n  }\n}"
                }
            ],
            "src/stories/open/components/HeaderBar.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/open/components/HeaderBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/open/components/HeaderBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HeaderBarComponent>",
                    "defaultValue": "(args: HeaderBarComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/open/pages/account-request/AccountRequest.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/open/pages/account-request/AccountRequest.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/open/pages/account-request/AccountRequest.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AccountRequestComponent>",
                    "defaultValue": "(args: AccountRequestComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts": [
                {
                    "name": "selectAccountRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAccountRequestState,\n  (state) => state.accountRequest ? {...state.accountRequest} : null\n)"
                },
                {
                    "name": "selectAccountRequestState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromAccountRequest.State>(\n  fromAccountRequest.accountRequestFeatureKey\n)"
                },
                {
                    "name": "selectActiveStep",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAccountRequestState,\n  (state) => {\n    if (state.steps) {\n      return [...state.steps]\n    }\n    return [];\n  }\n)"
                },
                {
                    "name": "selectSteps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAccountRequestState,\n  (state) => {\n    if (state.steps) {\n      return [...state.steps]\n    }\n    return [];\n  }\n)"
                }
            ],
            "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts": [
                {
                    "name": "selectForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(instanceId: string) => createSelector(\n  selectNgrxFormState,\n  (state) => {\n    return state.forms[instanceId] ? {...state.forms[instanceId]} : undefined;\n  }\n)"
                },
                {
                    "name": "selectFormGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(groupId: string) => createSelector(\n  selectNgrxFormState,\n  (state) => {\n    const group = state.groups[groupId];\n    if (group) {\n      const res: ControlledFormGroupData = {\n        forms: [...group],\n        instanceId: groupId,\n        dirty: false,\n        valid: true,\n        errors: {},\n        value: {}\n      };\n      group.forEach(f => {\n          const form = state.forms[f];\n          if (! form) {\n            return undefined;\n          }\n          if (form.dirty) {\n            res.dirty = true;\n          }\n          if (! form.valid) {\n            res.valid = false;\n            res.errors[f] = {...form.errors}\n          }\n          res.value[f] = {...form.value};\n          return;\n      });\n      // const controls = group.map(f => {\n      //   const form = state.forms[f];\n      //   if (! form) {\n      //     return undefined;\n      //   }\n      //   res.value[f] = {...form.value};\n      // }).filter(f => !! f);\n      return res;\n    }\n    return undefined;\n  }\n)"
                },
                {
                    "name": "selectNgrxFormState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromNgrxForm.State>(\n  fromNgrxForm.ngrxFormFeatureKey\n)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts": [
                {
                    "name": "AccountRequestStatus",
                    "childs": [
                        {
                            "name": "pristine",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pristine"
                        },
                        {
                            "name": "dirty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dirty"
                        },
                        {
                            "name": "done",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "done"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/pages/partial/lib/partial.ts": [
                {
                    "name": "PartialLoader",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/pages/partial/lib/partial.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "loadChildren": "./pages/home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/home/home-routing.module.ts",
                                        "module": "HomeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "dynamic-components",
                        "loadChildren": "./pages/dynamic-components/dynamic-components.module#DynamicComponentsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/dynamic-components/dynamic-components-routing.module.ts",
                                        "module": "DynamicComponentsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DynamicComponentsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DynamicComponentsModule"
                            }
                        ]
                    },
                    {
                        "path": "partial",
                        "loadChildren": "./pages/partial/partial.module#PartialModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/partial/partial-routing.module.ts",
                                        "module": "PartialRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DemoComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PartialModule"
                            }
                        ]
                    },
                    {
                        "path": "modular-components",
                        "loadChildren": "./pages/modular-components/modular-components.module#ModularComponentsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/modular-components/modular-components-routing.module.ts",
                                        "module": "ModularComponentsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ModularComponentsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ModularComponentsModule"
                            }
                        ]
                    },
                    {
                        "path": "phoenix",
                        "loadChildren": "./phoenix/phoenix.module#PhoenixModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/phoenix/phoenix-routing.module.ts",
                                        "module": "PhoenixRoutingModule",
                                        "children": [
                                            {
                                                "path": "open"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PhoenixModule"
                            }
                        ]
                    },
                    {
                        "path": "demos",
                        "children": [
                            {
                                "path": "ngrx-forms",
                                "loadChildren": "./phoenix/lib/components/ngrx-form/demo/demo.module#DemoModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/phoenix/lib/components/ngrx-form/demo/demo-routing.module.ts",
                                                "module": "DemoRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "NgrxFormDemoComponent"
                                                    },
                                                    {
                                                        "path": "stepper",
                                                        "component": "NgrxFormStepperDemoComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "DemoModule"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dynamic-components/dynamic-component.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicComponentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dynamic-components/dynamic-components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dynamic-components/greeting/greeting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GreetingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modular-components/modular-components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModularComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/partial/demo/demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/partial/demo/partials/sample.partial.ts",
                "type": "component",
                "linktype": "component",
                "name": "SampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/partial/lib/partial.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PartialConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/partial/lib/partial.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PartialOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/partial/lib/partial.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "partial",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/partial/lib/partial/partial.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PartialComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/demo/form-one/form-one.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormOneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/demo/form-state-inspector/form-state-inspector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormStateInspectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/demo/form-two/form-two.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormTwoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/demo/ngrx-form-demo/ngrx-form-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgrxFormDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/demo/ngrx-form-stepper-demo/ngrx-form-stepper-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgrxFormStepperDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-stepper/ngrx-form-step.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgrxFormStepDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-stepper/ngrx-form-stepper-form.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgrxFormStepperFormDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-stepper/ngrx-form-stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgrxFormStepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "markAsClean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NgrxFormEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ngrxFormFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNgrxFormState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControlledForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControlledFormData",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControlledFormGroupData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgrxForm",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgrxFormAccessor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form-store/ngrx-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NgrxFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form/ngrx-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgrxFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/components/ngrx-form/ngrx-form/ngrx-form.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgrxFormDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/lib/pipes/map-object.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MapObjectPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/components/header-bar/header-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/account-request.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountRequestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextStep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "patchAccountRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "previousStep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setActiveStep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSteps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setStepStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountRequestEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccountRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccountRequestStep",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountRequestFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccountRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAccountRequestState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveStep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/phoenix/open/pages/account-request/store/account-request.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSteps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/open/components/HeaderBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/open/components/HeaderBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/open/pages/account-request/AccountRequest.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/open/pages/account-request/AccountRequest.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}